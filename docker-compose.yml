services:
   # RabbitMQ Message Broker
   rabbitmq:
      image: rabbitmq:3-management
      container_name: rabbitmq
      ports:
         - "5672:5672" # AMQP port
         - "15672:15672" # Management UI
      environment:
         - RABBITMQ_DEFAULT_USER=guest
         - RABBITMQ_DEFAULT_PASS=guest
      networks:
         - ecommerce-network
      healthcheck:
         test: ["CMD", "rabbitmq-diagnostics", "ping"]
         interval: 10s
         timeout: 5s
         retries: 5
      deploy:
         resources:
            limits:
               cpus: "1.0"
               memory: 512mb

   # Jaeger for distributed tracing
   jaeger:
      image: jaegertracing/all-in-one:latest
      container_name: jaeger
      ports:
         - "5775:5775/udp"
         - "6831:6831/udp"
         - "6832:6832/udp"
         - "5778:5778"
         - "16686:16686" # Jaeger UI
         - "14268:14268"
         - "14250:14250"
         - "9411:9411" # Zipkin compatible endpoint
      environment:
         - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      networks:
         - ecommerce-network
      deploy:
         resources:
            limits:
               cpus: "1.0"
               memory: 512mb

   auth-service:
      build: ./auth-service
      ports:
         - 5006:5006
      environment:
         - JWT_SECRET=${JWT_SECRET}
         - USER_SERVICE_GRPC_URI=user-service:50051
      networks:
         - ecommerce-network
      deploy:
         resources:
            limits:
               cpus: "1.0"
               memory: 500mb

   user-service:
      build: ./user-service
      environment:
         - MONGO_URI=mongodb://mongo-users:27017/ecommerce-users
         - JWT_SECRET=${JWT_SECRET}
         - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      networks:
         - ecommerce-network
      depends_on:
         rabbitmq:
            condition: service_healthy
         mongo-users:
            condition: service_started
      deploy:
         resources:
            limits:
               cpus: "1.0"
               memory: 500mb

   user-service-envoy:
      image: envoyproxy/envoy:v1.31-latest
      container_name: user-service-envoy
      ports:
         - "5000:8080"
         - "9901:9901"
      volumes:
         - ./envoy/user-service-envoy.yml:/etc/envoy/envoy.yml
      networks:
         - ecommerce-network
      depends_on:
         - user-service
         - jaeger
      command:
         [
            "envoy",
            "-c",
            "/etc/envoy/envoy.yml",
            "--service-cluster",
            "user-service-proxy",
            "--log-level",
            "info",
         ]

   product-service:
      build: ./product-service
      environment:
         - MONGO_URI=mongodb://mongo-products:27017/ecommerce-products
         - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      networks:
         - ecommerce-network
      depends_on:
         rabbitmq:
            condition: service_healthy
         mongo-products:
            condition: service_started
      deploy:
         replicas: 6
         resources:
            limits:
               cpus: "1.0"
               memory: 500mb

   product-service-envoy:
      image: envoyproxy/envoy:v1.31-latest
      container_name: product-service-envoy
      ports:
         - "5001:8080"
         - "9902:9901"
      volumes:
         - ./envoy/product-service-envoy.yml:/etc/envoy/envoy.yml
      networks:
         - ecommerce-network
      depends_on:
         - product-service
         - jaeger
      command:
         [
            "envoy",
            "-c",
            "/etc/envoy/envoy.yml",
            "--service-cluster",
            "product-service-proxy",
            "--log-level",
            "info",
         ]

   shopping-cart-service:
      build: ./shopping-cart-service
      environment:
         - MONGO_URI=mongodb://mongo-cart:27017/ecommerce-cart
         - PRODUCT_SERVICE_URI=http://product-service:5001
         - PORT=5002
         - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      networks:
         - ecommerce-network
      depends_on:
         rabbitmq:
            condition: service_healthy
         mongo-cart:
            condition: service_started
      deploy:
         resources:
            limits:
               cpus: "2.0"
               memory: 1G

   cart-service-envoy:
      image: envoyproxy/envoy:v1.31-latest
      container_name: cart-service-envoy
      ports:
         - "5002:8080"
         - "9903:9901"
      volumes:
         - ./envoy/cart-service-envoy.yml:/etc/envoy/envoy.yml
      networks:
         - ecommerce-network
      depends_on:
         - shopping-cart-service
         - jaeger
      command:
         [
            "envoy",
            "-c",
            "/etc/envoy/envoy.yml",
            "--service-cluster",
            "cart-service-proxy",
            "--log-level",
            "info",
         ]

   order-service:
      build: ./order-service
      environment:
         - MONGO_URI=mongodb://mongo-orders:27017/ecommerce-orders
         - PRODUCT_SERVICE_URI=http://product-service:5001
         - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      networks:
         - ecommerce-network
      depends_on:
         rabbitmq:
            condition: service_healthy
         mongo-orders:
            condition: service_started
      deploy:
         replicas: 3
         resources:
            limits:
               cpus: "1.0"
               memory: 500mb

   order-service-envoy:
      image: envoyproxy/envoy:v1.31-latest
      container_name: order-service-envoy
      ports:
         - "5003:8080"
         - "9904:9901"
      volumes:
         - ./envoy/order-service-envoy.yml:/etc/envoy/envoy.yml
      networks:
         - ecommerce-network
      depends_on:
         - order-service
         - jaeger
      command:
         [
            "envoy",
            "-c",
            "/etc/envoy/envoy.yml",
            "--service-cluster",
            "order-service-proxy",
            "--log-level",
            "info",
         ]

   payment-service:
      build: ./payment-service
      environment:
         - MONGO_URI=mongodb://mongo-payments:27017/ecommerce-payments
         - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
         - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      networks:
         - ecommerce-network
      depends_on:
         rabbitmq:
            condition: service_healthy
         mongo-payments:
            condition: service_started

   payment-service-envoy:
      image: envoyproxy/envoy:v1.31-latest
      container_name: payment-service-envoy
      ports:
         - "5004:8080"
         - "9905:9901"
      volumes:
         - ./envoy/payment-service-envoy.yml:/etc/envoy/envoy.yml
      networks:
         - ecommerce-network
      depends_on:
         - payment-service
         - jaeger
      command:
         [
            "envoy",
            "-c",
            "/etc/envoy/envoy.yml",
            "--service-cluster",
            "payment-service-proxy",
            "--log-level",
            "info",
         ]

   notification-service:
      build: ./notification-service
      environment:
         - NODEMAILER_EMAIL=${NODEMAILER_EMAIL}
         - NODEMAILER_PASSWORD=${NODEMAILER_PASSWORD}
         - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
         - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
         - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
         - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      networks:
         - ecommerce-network
      depends_on:
         rabbitmq:
            condition: service_healthy

   notification-service-envoy:
      image: envoyproxy/envoy:v1.31-latest
      container_name: notification-service-envoy
      ports:
         - "5005:8080"
         - "9906:9901"
      volumes:
         - ./envoy/notification-service-envoy.yml:/etc/envoy/envoy.yml
      networks:
         - ecommerce-network
      depends_on:
         - notification-service
         - jaeger
      command:
         [
            "envoy",
            "-c",
            "/etc/envoy/envoy.yml",
            "--service-cluster",
            "notification-service-proxy",
            "--log-level",
            "info",
         ]

   # Separate MongoDB instances for each service
   mongo-users:
      image: mongo:latest
      ports:
         - "27017:27017"
      volumes:
         - mongo-users-data:/data/db
      networks:
         - ecommerce-network
      deploy:
         resources:
            limits:
               cpus: "0.5"
               memory: 512M

   mongo-products:
      image: mongo:latest
      ports:
         - "27018:27017"
      volumes:
         - mongo-products-data:/data/db
      networks:
         - ecommerce-network
      deploy:
         resources:
            limits:
               cpus: "1.0"
               memory: 1G

   mongo-cart:
      image: mongo:latest
      ports:
         - "27019:27017"
      volumes:
         - mongo-cart-data:/data/db
      networks:
         - ecommerce-network
      deploy:
         resources:
            limits:
               cpus: "0.5"
               memory: 512M

   mongo-orders:
      image: mongo:latest
      ports:
         - "27020:27017"
      volumes:
         - mongo-orders-data:/data/db
      networks:
         - ecommerce-network
      deploy:
         resources:
            limits:
               cpus: "0.5"
               memory: 512M

   mongo-payments:
      image: mongo:latest
      ports:
         - "27021:27017"
      volumes:
         - mongo-payments-data:/data/db
      networks:
         - ecommerce-network
      deploy:
         resources:
            limits:
               cpus: "0.5"
               memory: 512M

   client:
      build: ./client
      ports:
         - "3000:3000"

      networks:
         - ecommerce-network
      depends_on:
         - nginx

   nginx:
      image: nginx:latest
      ports:
         - "80:80"
      volumes:
         - ./nginx.conf:/etc/nginx/nginx.conf
      networks:
         - ecommerce-network
      depends_on:
         - user-service
         - product-service
         - shopping-cart-service
         - order-service
         - payment-service
      deploy:
         resources:
            limits:
               cpus: "1.0"
               memory: 500mb
   cadvisor:
      image: gcr.io/cadvisor/cadvisor:latest
      container_name: cadvisor
      ports:
         - "8080:8080"
      volumes:
         - /:/rootfs:ro
         - /var/run:/var/run:ro
         - /sys:/sys:ro
         - /var/lib/docker/:/var/lib/docker:ro
      networks:
         - ecommerce-network
   prometheus:
      image: prom/prometheus:latest
      container_name: prometheus
      ports:
         - "9090:9090"
      volumes:
         - ./prometheus.yml:/etc/prometheus/prometheus.yml
      depends_on:
         - cadvisor
      networks:
         - ecommerce-network
   # influxdb:
   #   image: influxdb:1.8
   #   container_name: influxdb
   #   ports:
   #     - "8086:8086"
   #   environment:
   #     - INFLUXDB_DATA_MAX_SERIES_PER_DATABASE=0
   #     - INFLUXDB_DATA_MAX_VALUES_PER_TAG=0
   #   volumes:
   #     - influxdb-data:/var/lib/influxdb
   #   networks:
   #     - ecommerce-network
   grafana:
      image: grafana/grafana:latest
      container_name: grafana-ktpm-ecom
      ports:
         - "1000:3000"
      depends_on:
         - prometheus
      networks:
         - ecommerce-network
      volumes:
         - grafana-data:/var/lib/grafana

volumes:
   mongo-users-data: {}
   mongo-products-data: {}
   mongo-cart-data: {}
   mongo-orders-data: {}
   mongo-payments-data: {}
   influxdb-data: {}
   grafana-data: {}

networks:
   ecommerce-network:
      driver: bridge
