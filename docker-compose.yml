services:
  user-service:
    build: ./user-service
    ports:
      - 5000:5000
    environment:
      - MONGO_URI=${MONGO_URI_USERS}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - ecommerce-network
    depends_on:
      - mongo
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
    # deploy:
    #   replicas: 2

  product-service:
    build: ./product-service
    ports:
      - 5001:5001
    environment:
      - MONGO_URI=${MONGO_URI_PRODUCTS}
      - NODE_CLUSTER_WORKERS=4
    networks:
      - ecommerce-network
    depends_on:
      - mongo
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G

  shopping-cart-service:
    build: ./shopping-cart-service
    ports:
      - 5002:5002
    environment:
      - MONGO_URI=${MONGO_URI_CART}
      - PRODUCT_SERVICE_URI=http://product-service:5001
      - PORT=5002
    networks:
      - ecommerce-network
    depends_on:
      - mongo
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G

  order-service:
    build: ./order-service
    ports:
      - 5003:5003
    environment:
      - MONGO_URI=${MONGO_URI_ORDER}
      - PRODUCT_SERVICE_URI=http://product-service:5001
    networks:
      - ecommerce-network
    depends_on:
      - mongo
    # deploy:
    #   replicas: 2

  payment-service:
    build: ./payment-service
    ports:
      - 5004:5004
    environment:
      - MONGO_URI=${MONGO_URI_PAYMENT}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    networks:
      - ecommerce-network
    depends_on:
      - mongo
    # deploy:
    #   replicas: 2

  notification-service:
    build: ./notification-service
    ports:
      - 5005:5005
    environment:
      - NODEMAILER_EMAIL=${NODEMAILER_EMAIL}
      - NODEMAILER_PASSWORD=${NODEMAILER_PASSWORD}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
    networks:
      - ecommerce-network

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - ecommerce-network
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 3G
  client:
    build: ./client
    ports:
      - "3000:3000"

    networks:
      - ecommerce-network
    depends_on:
      - nginx

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - ecommerce-network
    depends_on:
      - user-service
      - product-service
      - shopping-cart-service
      - order-service
      - payment-service
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 500mb
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - ecommerce-network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - cadvisor
    networks:
      - ecommerce-network
  # influxdb:
  #   image: influxdb:1.8
  #   container_name: influxdb
  #   ports:
  #     - "8086:8086"
  #   environment:
  #     - INFLUXDB_DATA_MAX_SERIES_PER_DATABASE=0
  #     - INFLUXDB_DATA_MAX_VALUES_PER_TAG=0
  #   volumes:
  #     - influxdb-data:/var/lib/influxdb
  #   networks:
  #     - ecommerce-network
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-ktpm-ecom
    ports:
      - "1000:3000"
    depends_on:
      - prometheus
    networks:
      - ecommerce-network
    volumes:
      - grafana-data:/var/lib/grafana
      
volumes:
  mongo-data: {}
  influxdb-data: {}
  grafana-data: {}

networks:
  ecommerce-network:
    driver: bridge
